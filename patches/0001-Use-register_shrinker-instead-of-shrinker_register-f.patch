From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Rachapalli Bandi Jagadeesh <jagadeesh.rachapalli.bandi@intel.com>
Date: Sat, 18 Oct 2025 22:45:35 +0530
Subject: [PATCH] Use register_shrinker instead of shrinker_register for below
 6.7 kernels
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

register_shrinker() api is replaced with shrinker_alloc() and
shrinker_register() from 6.7 kernel.
Also unregister_shrinker() is replaced with shrinker_free().
Also member private_data has been added into struct shrink to store xe
driver shrink struct.
Hence observing below errors.
To fix these errors, used older apis for below 6.7 kernels.

Reference:
        c42d50aefd17
        mm: shrinker: add infrastructure for dynamically allocating shrinker

Signed-off-by: Rachapalli Bandi Jagadeesh <jagadeesh.rachapalli.bandi@intel.com>
---
 drivers/gpu/drm/xe/xe_shrinker.c | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/drivers/gpu/drm/xe/xe_shrinker.c b/drivers/gpu/drm/xe/xe_shrinker.c
index 90244fe..c068235 100644
--- a/drivers/gpu/drm/xe/xe_shrinker.c
+++ b/drivers/gpu/drm/xe/xe_shrinker.c
@@ -28,13 +28,22 @@ struct xe_shrinker {
 	rwlock_t lock;
 	long shrinkable_pages;
 	long purgeable_pages;
+#ifdef BPM_SHRINKER_ALLOC_NOT_PRESENT
+	struct shrinker shrink;
+#else
 	struct shrinker *shrink;
+#endif
 	struct work_struct pm_worker;
 };
 
 static struct xe_shrinker *to_xe_shrinker(struct shrinker *shrink)
 {
+#ifdef BPM_SHRINKER_ALLOC_NOT_PRESENT
+	struct xe_shrinker *shrinker = container_of(shrink, typeof(*shrinker) , shrink);
+	return shrinker;
+#else
 	return shrink->private_data;
+#endif
 }
 
 /**
@@ -269,7 +278,11 @@ static void xe_shrinker_fini(struct drm_device *drm, void *arg)
 
 	xe_assert(shrinker->xe, !shrinker->shrinkable_pages);
 	xe_assert(shrinker->xe, !shrinker->purgeable_pages);
+#ifdef BPM_SHRINKER_ALLOC_NOT_PRESENT
+	unregister_shrinker(&shrinker->shrink);
+#else
 	shrinker_free(shrinker->shrink);
+#endif
 	flush_work(&shrinker->pm_worker);
 	kfree(shrinker);
 }
@@ -287,19 +300,27 @@ int xe_shrinker_create(struct xe_device *xe)
 	if (!shrinker)
 		return -ENOMEM;
 
+#ifndef BPM_SHRINKER_ALLOC_NOT_PRESENT
 	shrinker->shrink = shrinker_alloc(0, "drm-xe_gem:%s", xe->drm.unique);
 	if (!shrinker->shrink) {
 		kfree(shrinker);
 		return -ENOMEM;
 	}
+#endif
 
 	INIT_WORK(&shrinker->pm_worker, xe_shrinker_pm);
 	shrinker->xe = xe;
 	rwlock_init(&shrinker->lock);
+#ifdef BPM_SHRINKER_ALLOC_NOT_PRESENT
+	shrinker->shrink.count_objects = xe_shrinker_count;
+        shrinker->shrink.scan_objects = xe_shrinker_scan;
+	register_shrinker(&shrinker->shrink, "drm-xe_gem");
+#else
 	shrinker->shrink->count_objects = xe_shrinker_count;
 	shrinker->shrink->scan_objects = xe_shrinker_scan;
 	shrinker->shrink->private_data = shrinker;
 	shrinker_register(shrinker->shrink);
+#endif
 	xe->mem.shrinker = shrinker;
 
 	return drmm_add_action_or_reset(&xe->drm, xe_shrinker_fini, shrinker);
-- 
2.43.0

